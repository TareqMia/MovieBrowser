{"version":3,"sources":["components/Search.js","components/Movie.js","components/Movies.js","components/Modal.js","App.js","reportWebVitals.js","index.js"],"names":["Search","handleInput","search","type","placeholder","className","onChange","onKeyPress","Movie","movie","openModal","onClick","imdbID","alt","src","Poster","Title","Movies","movies","renderedList","style","color","textAlign","map","Modal","show","setShow","onClose","CSSTransition","in","unmountOnExit","timeout","enter","exit","e","stopPropagation","Year","Rated","Director","Plot","Actors","Writers","imdbRating","Runtime","App","url","useState","searchTerm","state","setState","selectedMovie","setSelectedMovie","event","s","target","value","prevState","key","axios","get","then","result","data","id","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13930964.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Search = ( {handleInput, search} ) => {\n    return (\n        <section>\n            <input \n            type=\"text\" \n            placeholder=\"Search for a movie...\" \n            className=\"searchbox\" \n            onChange={handleInput} \n            onKeyPress={search}  \n            />\n        </section>\n    );\n}\n\n\nexport default Search;","import React from 'react';\n\n/**\n * Movie component that displays info about individual movies (including name and poster)\n * @param movie -> JSON of single movie retrieved from API search\n * @param openModal -> handles opening and closing modal popup\n * @returns JSX to render one movie\n */\nconst Movie = ({movie, openModal}) => {\n    return (\n        <div className=\"movie\" onClick={() => openModal(movie.imdbID)}>\n            <img alt=\"movie-poster\" src={movie.Poster === \"N/A\" ?\n             'https://placehold.it/198x264&text=Image+Not+Found' \n             : movie.Poster} />\n            <h3>{movie.Title}</h3>\n            \n        </div>\n    );\n}\n\nexport default Movie;","import React from 'react';\nimport Movie from './Movie';\n\n/**\n * Renders a list of Movie components based on the list passed in as props\n * @param movies -> list of movies retrieved from API search\n * @param openModal -> callback function to handle opening/closing modal\n * @returns JSX to render a list of movies\n */\nconst Movies = ({ movies, openModal}) => {\n    \n    let renderedList = [];\n    \n    //handling case where no movies are found\n    if  (movies == null) {\n        return (\n            <div style={{color: 'white', textAlign: 'center'}}>\n               <h2>Sorry, movie not found üôÅ</h2>\n            </div>)\n    } else {\n        renderedList = movies.map(movie => {\n            //returning individal Movie components\n            return <Movie openModal={openModal}  key={movie.imdbID} movie={movie} />\n        });\n    }\n    \n\n    return(\n    <section className=\"movies\">\n            {renderedList}\n    </section> \n    );\n}\n\nexport default Movies;","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\n/**\n * component to display popup to display more info about a given movie\n * @param show -> boolean to determine to show/not show modal\n * @param setShow -> function to set 'show' value\n * @param movie -> the movie that is being shown\n * @param onClose -> helps in closing the popup\n * @returns JSX to render modal information\n */\nconst Modal = ({show, setShow, movie, onClose}) => {\n   \n    return (\n        //used to remove modal from DOM when not opened\n        <CSSTransition \n        in={show}\n        unmountOnExit\n        timeout={{ enter: 0, exit: 300 }}\n        >\n            <div className=\"modal\" onClick={onClose}>\n                <div className={`modal-background modal-showing-${show}`}>\n                    <div className=\"modal-inner\" onClick={(e) => e.stopPropagation()}>\n                        <div>\n                            <img className=\"modal-image\" src={movie.Poster} alt=\"poster\" />\n                        </div>\n                        <div className=\"modal-text\">\n                            <h2>\n                                {movie.Title} <br />\n                                {movie.Year} <br />\n                                {movie.Rated}\n                            </h2>\n                            \n                            <h5>Director(s): {movie.Director}</h5>\n                            <div className=\"movie-desc\">\n                                <p>\n                                    {movie.Plot}\n                                </p>\n                            </div>\n                            <div>Cast: {movie.Actors}</div>\n                            <div>{movie.Writers}</div>\n                            <div>IMDB Rating: {movie.imdbRating}</div>\n                            <div>Runtime: {movie.Runtime}</div> <br />\n\n\n                            <button className=\"ui button black\" onClick={() => { setShow(false) }}>Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </CSSTransition>\n\n    );\n}\n\nexport default Modal;","import React, { useState } from 'react';\nimport Search from './components/Search';\nimport Movies from './components/Movies';\nimport Modal from './components/Modal';\nimport axios from 'axios';\n\n\n/**\n * Main app component that renders the list of movies, as well\n * as the pop-up for more info\n * @returns -> JSX that is rendered by React\n */\nconst App = () => {\n  const apikey = `10abef78`;\n  const url = `https://www.omdbapi.com/?apikey=${apikey}&`;\n  \n\n  /**\n   * setting up state using useState hook\n   * searchTerm -> user input\n   * movies -> list of movies provided by API \n   */\n  const [state, setState] = useState({\n    searchTerm: \"\",\n    movies: [],\n  });\n\n  /**\n   * state for modal pop-up\n   * show -> modal showing or not\n   */\n  const [show, setShow] = useState(false);\n  const [selectedMovie, setSelectedMovie] = useState({});\n\n  /**\n   * Sets search term based on user input\n   * @param {*} event -> anytime a key is pressed by the user\n   */\n  const handleInput = (event) => {\n    let s = event.target.value;\n\n    setState(prevState => {\n      return {...prevState, searchTerm: s}\n    });\n\n    //debugging\n    //console.log(state.searchTerm);\n  }\n\n  /**\n   * performs a GET request with given search term\n   * sets the list of movies to be renered\n   * @param {*} event -> event (the search term that is submitted with 'enter') \n   * \n   */\n  const search = (event) => {\n    if (event.key === 'Enter'){\n      axios.get(url + \"&s=\" + state.searchTerm)\n      .then(({ data }) => {\n        let result = data.Search;\n        setState({ movies: result });\n      })\n    }\n  }\n\n  /**\n   * performs GET request with specified movie to retrieve more info about movie\n   * sets selectedMovie for modal to show\n   * @param {*} id -> imdb ID for the given movie \n   */\n  const openModal = (id) => {\n    if (state.movies.length > 0){\n      setSelectedMovie(state.movies[0]);\n    }\n    axios(url + \"&i=\" + id).then(({ data }) => {\n    let movie = data;\n    setSelectedMovie(movie);\n    setShow(true); \n    });\n  }\n\n\n// returning JSX to be rendered\n  return(\n  <div>\n    <header>\n        <h1>üé•Moviesüé•</h1>\n    </header>\n\n    <main className=\"main\">\n        <Search handleInput={handleInput} search={search} />\n        <Movies movies={state.movies} openModal={openModal} />\n        \n        {(typeof selectedMovie.Title != 'undefined')? \n        \n        <Modal \n        movie={selectedMovie} show={show} setShow={setShow} \n        onClose={() => setShow(false)} \n        /> : false} \n\n    </main>\n    \n  </div>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}